export class Router {
    constructor(routes, rootElement) {
        this.routes = routes;
        this.rootElement = rootElement;
        this.currentRoute = null;
        
        console.log('üõ£Ô∏è Router —Å–æ–∑–¥–∞–Ω —Å', routes.length, '–º–∞—Ä—à—Ä—É—Ç–∞–º–∏');
        
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è hash
        window.addEventListener('popstate', () => this.handleRouteChange());
        window.addEventListener('hashchange', () => this.handleRouteChange());
    }

    navigateTo(path) {
        console.log('üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫:', path);
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å
        if (!path.startsWith('/')) {
            path = '/' + path;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º hash
        if (window.location.hash !== '#' + path) {
            window.location.hash = path;
        } else {
            // –ï—Å–ª–∏ hash –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ä—É—á–Ω—É—é
            this.handleRouteChange();
        }
    }

    handleRouteChange() {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –∏–∑ hash
        let path = window.location.hash.substring(1) || '/';
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å
        if (!path.startsWith('/')) {
            path = '/' + path;
        }
        
        console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç:', path);
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Ä—à—Ä—É—Ç
        const matchedRoute = this.findMatchingRoute(path);
        
        if (matchedRoute) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω –º–∞—Ä—à—Ä—É—Ç:', matchedRoute.route.path);
            
            try {
                this.currentRoute = matchedRoute;
                const result = matchedRoute.route.render(matchedRoute.params);
                
                // –ï—Å–ª–∏ render –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
                if (result && typeof result.then === 'function') {
                    result.catch(error => {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –º–∞—Ä—à—Ä—É—Ç–∞:', error);
                        this.show404();
                    });
                }
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ –º–∞—Ä—à—Ä—É—Ç–∞:', error);
                this.show404();
            }
        } else {
            console.warn('‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', path);
            this.show404();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        this.updateActiveNav(path);
    }

    findMatchingRoute(path) {
        for (const route of this.routes) {
            const match = this.matchRoute(route.path, path);
            if (match) {
                return {
                    route: route,
                    params: match.params
                };
            }
        }
        return null;
    }

    matchRoute(routePath, actualPath) {
        // –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç–∏ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã
        const routeSegments = routePath.split('/').filter(Boolean);
        const actualSegments = actualPath.split('/').filter(Boolean);
        
        // –î–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        if (routePath === '/' && actualPath === '/') {
            return { params: {} };
        }
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å
        if (routeSegments.length !== actualSegments.length) {
            return null;
        }
        
        const params = {};
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç
        for (let i = 0; i < routeSegments.length; i++) {
            const routeSegment = routeSegments[i];
            const actualSegment = actualSegments[i];
            
            if (routeSegment.startsWith(':')) {
                // –ü–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Ä—à—Ä—É—Ç–∞
                const paramName = routeSegment.substring(1);
                params[paramName] = actualSegment;
            } else if (routeSegment !== actualSegment) {
                // –°–µ–≥–º–µ–Ω—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
                return null;
            }
        }
        
        return { params };
    }

    show404() {
        console.log('üö´ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 404');
        if (this.rootElement) {
            this.rootElement.innerHTML = `
                <div class="container error-page">
                    <div class="error-message">
                        <h2>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h2>
                        <p>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</p>
                        <div class="error-actions">
                            <a href="#/" class="btn btn--primary">
                                –ù–∞ –≥–ª–∞–≤–Ω—É—é
                            </a>
                            <button onclick="history.back()" class="btn btn--outline">
                                –ù–∞–∑–∞–¥
                            </button>
                        </div>
                    </div>
                </div>
            `;
        }
    }
    
    updateActiveNav(currentPath) {
        const navLinks = document.querySelectorAll('.app-nav a[data-router-link]');
        
        navLinks.forEach(link => {
            const linkPath = link.getAttribute('href');
            if (!linkPath) return;
            
            const normalizedLinkPath = linkPath.startsWith('#') ? linkPath.substring(1) : linkPath;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å—Å—ã–ª–∫–∞
            let isActive = false;
            
            if (normalizedLinkPath === '/' && currentPath === '/') {
                isActive = true;
            } else if (normalizedLinkPath !== '/' && currentPath.startsWith(normalizedLinkPath)) {
                isActive = true;
            }
            
            link.classList.toggle('active', isActive);
        });
        
        console.log('üé® –ù–∞–≤–∏–≥–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è:', currentPath);
    }

    start() {
        console.log('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Ä–æ—É—Ç–µ—Ä–∞');
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç
        this.handleRouteChange();
        
        // –ï—Å–ª–∏ –Ω–µ—Ç hash, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        if (!window.location.hash) {
            this.navigateTo('/');
        }
    }

    getCurrentRoute() {
        return this.currentRoute;
    }

    destroy() {
        window.removeEventListener('popstate', this.handleRouteChange);
        window.removeEventListener('hashchange', this.handleRouteChange);
        this.routes = null;
        this.rootElement = null;
        this.currentRoute = null;
    }
}