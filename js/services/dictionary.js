export class DictionaryService {
  constructor(api) {
    this.api = api;
    this.dictionary = new Map();
    this.phoneticRules = new Map();
    this.isInitialized = false;
  }

  async init() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
      const rulesData = await this.api.fetchJSON('rules/phonetic.json'); // Corrected path
      if (rulesData && rulesData.rules) {
        this.phoneticRules = new Map(Object.entries(rulesData.rules));
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å–ª–æ–≤–∞—Ä—è –∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –Ω–µ–≥–æ
      const dictionaryIndex = await this.api.getDictionary();
      const loadPromises = [];

      for (const category in dictionaryIndex.categories) {
        for (const theme in dictionaryIndex.categories[category].themes) {
          loadPromises.push(this.loadDictionaryCategory(category, theme));
        }
      }

      await Promise.all(loadPromises);

      this.isInitialized = true;
      console.log('‚úÖ DictionaryService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—Å–µ–≥–æ —Å–ª–æ–≤:', this.dictionary.size);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DictionaryService:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–æ–≤–∞—Ä—è
   * @param {string} category - –∫–∞—Ç–µ–≥–æ—Ä–∏—è (verbs, nouns, adjectives)
   * @param {string} theme - —Ç–µ–º–∞ (basic, restaurant, shop)
   */
  async loadDictionaryCategory(category, theme = 'basic') {
    try {
      const words = await this.api.getDictionaryCategory(category, theme);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –≤ –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å
      for (const [key, wordData] of Object.entries(words)) {
        this.dictionary.set(key.toLowerCase(), {
          ...wordData,
          category,
          theme
        });
      }

      console.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}/${theme} (${Object.keys(words).length} —Å–ª–æ–≤)`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}/${theme}:`, error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ
   * @param {string} word - —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
   * @returns {Object|null}
   */
  getWord(word) {
    const normalizedWord = this.normalizeWord(word);
    return this.dictionary.get(normalizedWord) || null;
  }

  /**
   * –ò—â–µ—Ç —Å–ª–æ–≤–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
   * @param {string} query - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
   * @param {number} limit - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   * @returns {Array}
   */
  searchWords(query, limit = 10) {
    const normalizedQuery = query.toLowerCase().trim();
    const results = [];

    for (const [key, wordData] of this.dictionary) {
      if (results.length >= limit) break;

      // –ü–æ–∏—Å–∫ –ø–æ –ª–µ–º–º–µ
      if (key.includes(normalizedQuery)) {
        results.push({
          key,
          word: wordData,
          matchType: 'lemma',
          relevance: this.calculateRelevance(key, normalizedQuery)
        });
        continue;
      }

      // –ü–æ–∏—Å–∫ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É
      if (wordData.translations?.ru?.toLowerCase().includes(normalizedQuery)) {
        results.push({
          key,
          word: wordData,
          matchType: 'translation',
          relevance: this.calculateRelevance(wordData.translations.ru, normalizedQuery)
        });
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    return results.sort((a, b) => b.relevance - a.relevance);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
   * @param {string} ruleKey - –∫–ª—é—á –ø—Ä–∞–≤–∏–ª–∞
   * @returns {Object|null}
   */
  getPhoneticRule(ruleKey) {
    return this.phoneticRules.get(ruleKey) || null;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –∫ —Å–ª–æ–≤—É
   * @param {string} word - –ø–æ–ª—å—Å–∫–æ–µ —Å–ª–æ–≤–æ
   * @returns {string} - —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
   */
  applyPhoneticRules(word) {
    let transcription = word.toLowerCase();

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const ruleOrder = [
      'ƒÖ', 'ƒô', '≈Ç', 'ƒá', '≈õ', '≈∫', '≈Ñ',
      'rz', 'cz', 'sz', 'dz', 'd≈∫', 'd≈º',
      'cie', 'sie', 'zie', 'nie',
      'ci', 'si', 'zi', 'ni'
    ];

    for (const ruleKey of ruleOrder) {
      const rule = this.phoneticRules.get(ruleKey);
      if (rule) {
        const regex = new RegExp(ruleKey, 'gi');
        transcription = transcription.replace(regex, rule.ru);
      }
    }

    return transcription;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞
   * @param {Object} wordData - –¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
   * @returns {Object}
   */
  generatePronunciation(wordData) {
    if (wordData.pronunciation?.ru_transcription) {
      return wordData.pronunciation;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ
    const transcription = this.applyPhoneticRules(wordData.lemma);
    
    return {
      ru_transcription: transcription,
      auto_generated: true
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞
   * @param {string} word - —Å–ª–æ–≤–æ
   * @returns {Array}
   */
  getWordExamples(word) {
    const wordData = this.getWord(word);
    return wordData?.examples || [];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
   * @param {string} word - —Å–ª–æ–≤–æ
   * @returns {Array}
   */
  getRelatedWords(word) {
    const wordData = this.getWord(word);
    if (!wordData) return [];

    const related = [];
    const samePOS = this.getWordsByPartOfSpeech(wordData.part_of_speech);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ —Ç–æ–π –∂–µ —á–∞—Å—Ç–∏ —Ä–µ—á–∏ (–º–∞–∫—Å–∏–º—É–º 5)
    related.push(...samePOS.slice(0, 5));

    return related;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞ –ø–æ —á–∞—Å—Ç–∏ —Ä–µ—á–∏
   * @param {string} partOfSpeech - —á–∞—Å—Ç—å —Ä–µ—á–∏
   * @returns {Array}
   */
  getWordsByPartOfSpeech(partOfSpeech) {
    const words = [];
    
    for (const [key, wordData] of this.dictionary) {
      if (wordData.part_of_speech === partOfSpeech) {
        words.push({ key, ...wordData });
      }
    }

    return words;
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
   * @param {string} word - —Å–ª–æ–≤–æ
   * @returns {string}
   */
  normalizeWord(word) {
    return word.toLowerCase()
      .replace(/[.,!?;:()]/g, '')
      .trim();
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞
   * @param {string} text - —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @param {string} query - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
   * @returns {number}
   */
  calculateRelevance(text, query) {
    const normalizedText = text.toLowerCase();
    
    if (normalizedText === query) return 100;
    if (normalizedText.startsWith(query)) return 80;
    if (normalizedText.includes(query)) return 60;
    
    return 0;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª–æ–≤–∞—Ä—è
   * @returns {Object}
   */
  getStats() {
    const stats = {
      totalWords: this.dictionary.size,
      byPartOfSpeech: {},
      byCategory: {},
      byTheme: {}
    };

    for (const [key, wordData] of this.dictionary) {
      // –ü–æ —á–∞—Å—Ç—è–º —Ä–µ—á–∏
      stats.byPartOfSpeech[wordData.part_of_speech] = 
        (stats.byPartOfSpeech[wordData.part_of_speech] || 0) + 1;

      // –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      stats.byCategory[wordData.category] = 
        (stats.byCategory[wordData.category] || 0) + 1;

      // –ü–æ —Ç–µ–º–∞–º
      stats.byTheme[wordData.theme] = 
        (stats.byTheme[wordData.theme] || 0) + 1;
    }

    return stats;
  }

  getPartOfSpeechName(pos) {
    const names = {
      'verb': '–ì–ª–∞–≥–æ–ª',
      'noun': '–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ',
      'adjective': '–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ',
      'adverb': '–ù–∞—Ä–µ—á–∏–µ',
      'pronoun': '–ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ',
      'preposition': '–ü—Ä–µ–¥–ª–æ–≥',
      'conjunction': '–°–æ—é–∑',
      'particle': '–ß–∞—Å—Ç–∏—Ü–∞',
      'modal': '–ú–æ–¥–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ',
      'interjection': '–ú–µ–∂–¥–æ–º–µ—Ç–∏–µ',
      'numeral': '–ß–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–µ',
      'punctuation': '–ó–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è'
    };
    return names[pos] || pos;
  }
}