export class SpeechService {
  constructor() {
    this.synth = window.speechSynthesis;
    this.voices = [];
    this.polishVoices = [];
    this.currentUtterance = null;
    this.isInitialized = false;
    this.settings = {
      rate: 0.8,
      pitch: 1,
      volume: 1,
      language: 'pl-PL',
      voicePreference: 'female' // 'male', 'female', 'auto'
    };
    
    this.loadSettings();
  }

  async init() {
    if (!this.isSupported()) {
      console.warn('Speech Synthesis –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
      return;
    }

    try {
      await this.loadVoices();
      this.setupEventListeners();
      this.isInitialized = true;
      console.log('‚úÖ SpeechService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SpeechService:', error);
      throw error;
    }
  }

  isSupported() {
    return 'speechSynthesis' in window;
  }

  loadVoices() {
    return new Promise((resolve) => {
      // –ì–æ–ª–æ—Å–∞ –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      const loadVoicesHandler = () => {
        this.voices = Array.from(this.synth.getVoices());
        this.polishVoices = this.voices.filter(voice => 
          voice.lang.startsWith('pl') || 
          voice.lang === 'pl-PL'
        );
        
        if (this.voices.length > 0) {
          this.synth.removeEventListener('voiceschanged', loadVoicesHandler);
          console.log(`üì¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤: ${this.voices.length}, –ø–æ–ª—å—Å–∫–∏—Ö: ${this.polishVoices.length}`);
          resolve();
        }
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω—ã –ª–∏ –≥–æ–ª–æ—Å–∞ —Å—Ä–∞–∑—É
      if (this.synth.getVoices().length > 0) {
        loadVoicesHandler();
      } else {
        // –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤
        this.synth.addEventListener('voiceschanged', loadVoicesHandler);
        
        // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
        setTimeout(() => {
          if (this.voices.length === 0) {
            console.warn('–ì–æ–ª–æ—Å–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞');
            loadVoicesHandler();
          }
        }, 2000);
      }
    });
  }

  setupEventListeners() {
    // –ü–µ—Ä–µ–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–ª–æ—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    this.synth.addEventListener('voiceschanged', () => {
      this.loadVoices();
    });
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–æ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
   * @param {string} text - —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
   * @param {Object} options - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   * @returns {Promise}
   */
  speak(text, options = {}) {
    return new Promise((resolve, reject) => {
      if (!this.isSupported()) {
        reject(new Error('Speech Synthesis –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'));
        return;
      }

      if (!text || text.trim() === '') {
        reject(new Error('–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏'));
        return;
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      this.stop();

      const utterance = new SpeechSynthesisUtterance(text);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      this.applySettings(utterance, options);
      
      // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≥–æ–ª–æ—Å
      const voice = this.selectVoice(options.voicePreference);
      if (voice) {
        utterance.voice = voice;
        utterance.lang = voice.lang;
      } else {
        utterance.lang = this.settings.language;
      }

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      utterance.onstart = () => {
        console.log('üéµ –ù–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', text.substring(0, 50));
      };

      utterance.onend = () => {
        console.log('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
        this.currentUtterance = null;
        resolve();
      };

      utterance.onerror = (event) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', event.error);
        this.currentUtterance = null;
        reject(new Error(`Speech error: ${event.error}`));
      };

      utterance.onpause = () => {
        console.log('‚è∏Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      };

      utterance.onresume = () => {
        console.log('‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ');
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      this.currentUtterance = utterance;

      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      try {
        this.synth.speak(utterance);
        
        // –¢–∞–π–º–∞—É—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        setTimeout(() => {
          if (this.currentUtterance === utterance && !this.synth.speaking) {
            console.warn('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ —Ç–∞–π–º–∞—É—Ç—É');
            this.currentUtterance = null;
            resolve();
          }
        }, text.length * 100 + 5000); // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è + –±—É—Ñ–µ—Ä
        
      } catch (error) {
        this.currentUtterance = null;
        reject(error);
      }
    });
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
   */
  stop() {
    if (this.synth.speaking) {
      this.synth.cancel();
    }
    this.currentUtterance = null;
  }

  /**
   * –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
   */
  pause() {
    if (this.synth.speaking && !this.synth.paused) {
      this.synth.pause();
    }
  }

  /**
   * –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
   */
  resume() {
    if (this.synth.paused) {
      this.synth.resume();
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–¥–µ—Ç –ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
   * @returns {boolean}
   */
  isSpeaking() {
    return this.synth.speaking;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
   * @returns {boolean}
   */
  isPaused() {
    return this.synth.paused;
  }

  applySettings(utterance, options) {
    utterance.rate = options.rate || this.settings.rate;
    utterance.pitch = options.pitch || this.settings.pitch;
    utterance.volume = options.volume || this.settings.volume;
  }

  selectVoice(preference = null) {
    if (this.polishVoices.length === 0) {
      console.warn('–ü–æ–ª—å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      return null;
    }

    const voicePreference = preference || this.settings.voicePreference;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≥–æ–ª–æ—Å –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
    let selectedVoice = null;
    
    if (voicePreference === 'female') {
      selectedVoice = this.polishVoices.find(voice => 
        voice.name.toLowerCase().includes('female') ||
        voice.name.toLowerCase().includes('kobieta') ||
        voice.name.toLowerCase().includes('anna') ||
        voice.name.toLowerCase().includes('maja')
      );
    } else if (voicePreference === 'male') {
      selectedVoice = this.polishVoices.find(voice => 
        voice.name.toLowerCase().includes('male') ||
        voice.name.toLowerCase().includes('mƒô≈ºczyzna') ||
        voice.name.toLowerCase().includes('adam') ||
        voice.name.toLowerCase().includes('jakub')
      );
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    if (!selectedVoice) {
      selectedVoice = this.polishVoices[0];
    }

    console.log('üé§ –í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å:', selectedVoice?.name || '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    return selectedVoice;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤
   * @returns {Array}
   */
  getAvailableVoices() {
    return this.polishVoices.map(voice => ({
      name: voice.name,
      lang: voice.lang,
      gender: this.detectGender(voice.name),
      local: voice.localService
    }));
  }

  detectGender(voiceName) {
    const nameLower = voiceName.toLowerCase();
    
    if (nameLower.includes('female') || 
        nameLower.includes('kobieta') ||
        nameLower.includes('anna') ||
        nameLower.includes('maja') ||
        nameLower.includes('ewa')) {
      return 'female';
    }
    
    if (nameLower.includes('male') ||
        nameLower.includes('mƒô≈ºczyzna') ||
        nameLower.includes('adam') ||
        nameLower.includes('jakub') ||
        nameLower.includes('tomasz')) {
      return 'male';
    }
    
    return 'unknown';
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—á–∏
   * @param {Object} newSettings - –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  updateSettings(newSettings) {
    this.settings = { ...this.settings, ...newSettings };
    this.saveSettings();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   * @returns {Object}
   */
  getSettings() {
    return { ...this.settings };
  }

  saveSettings() {
    try {
      localStorage.setItem('speechSettings', JSON.stringify(this.settings));
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—á–∏:', error);
    }
  }

  loadSettings() {
    try {
      const saved = localStorage.getItem('speechSettings');
      if (saved) {
        this.settings = { ...this.settings, ...JSON.parse(saved) };
      }
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—á–∏:', error);
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
   * @param {string} testText - —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
   * @returns {Promise}
   */
  async testVoice(testText = 'Cze≈õƒá! Jak siƒô masz?') {
    try {
      await this.speak(testText);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞:', error);
      return false;
    }
  }

  /**
   * –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
   * @param {string} text - —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏
   * @param {number} maxLength - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —á–∞—Å—Ç–∏
   * @returns {Array}
   */
  splitTextForSpeech(text, maxLength = 200) {
    if (text.length <= maxLength) {
      return [text];
    }

    const sentences = text.split(/[.!?]+/).filter(s => s.trim());
    const chunks = [];
    let currentChunk = '';

    for (const sentence of sentences) {
      const trimmedSentence = sentence.trim();
      if (currentChunk.length + trimmedSentence.length <= maxLength) {
        currentChunk += (currentChunk ? '. ' : '') + trimmedSentence;
      } else {
        if (currentChunk) {
          chunks.push(currentChunk + '.');
        }
        currentChunk = trimmedSentence;
      }
    }

    if (currentChunk) {
      chunks.push(currentChunk + '.');
    }

    return chunks;
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ —á–∞—Å—Ç—è–º
   * @param {string} longText - –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   * @param {Object} options - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   * @returns {Promise}
   */
  async speakLongText(longText, options = {}) {
    const chunks = this.splitTextForSpeech(longText);
    const pauseBetweenChunks = options.pauseBetweenChunks || 500;

    for (let i = 0; i < chunks.length; i++) {
      await this.speak(chunks[i], options);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
      if (i < chunks.length - 1) {
        await this.delay(pauseBetweenChunks);
      }
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∞—É–¥–∏–æ-–ø–ª–µ–µ—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
   * @param {string} text - —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
   * @returns {HTMLElement}
   */
  createAudioPlayer(text) {
    const container = document.createElement('div');
    container.className = 'speech-player';
    
    container.innerHTML = `
      <button class="speech-player__btn speech-player__play" title="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏">
        <i class="fas fa-play"></i>
      </button>
      <button class="speech-player__btn speech-player__pause" title="–ü–∞—É–∑–∞" style="display: none;">
        <i class="fas fa-pause"></i>
      </button>
      <button class="speech-player__btn speech-player__stop" title="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å">
        <i class="fas fa-stop"></i>
      </button>
      <div class="speech-player__text">${text.substring(0, 50)}${text.length > 50 ? '...' : ''}</div>
    `;

    const playBtn = container.querySelector('.speech-player__play');
    const pauseBtn = container.querySelector('.speech-player__pause');
    const stopBtn = container.querySelector('.speech-player__stop');

    playBtn.addEventListener('click', async () => {
      try {
        playBtn.style.display = 'none';
        pauseBtn.style.display = 'inline-flex';
        await this.speak(text);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
      } finally {
        playBtn.style.display = 'inline-flex';
        pauseBtn.style.display = 'none';
      }
    });

    pauseBtn.addEventListener('click', () => {
      this.pause();
      playBtn.style.display = 'inline-flex';
      pauseBtn.style.display = 'none';
    });

    stopBtn.addEventListener('click', () => {
      this.stop();
      playBtn.style.display = 'inline-flex';
      pauseBtn.style.display = 'none';
    });

    return container;
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   * @returns {Object}
   */
  getUsageStats() {
    const stats = JSON.parse(localStorage.getItem('speechUsageStats') || '{}');
    const totalRequests = stats.totalRequests || 0;
    const totalCharacters = stats.totalCharacters || 0;

    return {
      totalRequests,
      totalCharacters,
      totalSpeechRequests: totalRequests,
      totalCharactersSpoken: totalCharacters,
      averageTextLength: totalRequests > 0 ?
        Math.round(totalCharacters / totalRequests) : 0,
      lastUsed: stats.lastUsed || null
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   * @param {string} text - –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  updateUsageStats(text) {
    const stats = JSON.parse(localStorage.getItem('speechUsageStats') || '{}');
    const updatedStats = {
      totalRequests: (stats.totalRequests || 0) + 1,
      totalCharacters: (stats.totalCharacters || 0) + text.length,
      lastUsed: Date.now()
    };

    try {
      localStorage.setItem('speechUsageStats', JSON.stringify(updatedStats));
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:', error);
    }
  }

  destroy() {
    this.stop();
    this.saveSettings();
    this.voices = [];
    this.polishVoices = [];
    this.currentUtterance = null;
    this.isInitialized = false;
  }
}