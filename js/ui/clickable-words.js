export class ClickableWordsHandler {
  constructor({ container, dictionary, modal }) {
    this.container = container;
    this.dictionary = dictionary;
    this.modal = modal;
    this.activeWord = null;
    this.tooltip = null;
    
    this.init();
  }

  init() {
    this.createTooltip();
    this.setupEventListeners();
  }

  createTooltip() {
    this.tooltip = document.createElement('div');
    this.tooltip.className = 'quick-tooltip';
    document.body.appendChild(this.tooltip);
  }

  setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–∞–º
    this.container.addEventListener('click', (e) => {
      const clickableWord = e.target.closest('.clickable-word');
      if (clickableWord) {
        e.preventDefault();
        e.stopPropagation();
        this.handleWordClick(clickableWord);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    this.container.addEventListener('mouseenter', (e) => {
      const clickableWord = e.target.closest('.clickable-word');
      if (clickableWord) {
        this.handleWordHover(clickableWord);
      }
    }, true);

    this.container.addEventListener('mouseleave', (e) => {
      const clickableWord = e.target.closest('.clickable-word');
      if (clickableWord) {
        this.handleWordLeave(clickableWord);
      }
    }, true);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    this.container.addEventListener('keydown', (e) => {
      const clickableWord = e.target.closest('.clickable-word');
      if (clickableWord && (e.key === 'Enter' || e.key === ' ')) {
        e.preventDefault();
        this.handleWordClick(clickableWord);
      }
    });
  }

  async handleWordClick(wordElement) {
    const wordKey = wordElement.dataset.wordKey;
    if (!wordKey) return;

    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      this.highlightWord(wordElement);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
      const wordData = await this.getWordData(wordKey);
      
      if (wordData) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å–ª–æ–≤–∞
        this.modal.showWord(wordData, {
          onClose: () => this.removeWordHighlight(wordElement)
        });
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        this.trackWordClick(wordKey);
      } else {
        // –ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        this.showBasicWordInfo(wordKey, wordElement);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞:', error);
      this.showErrorMessage(wordElement);
    }
  }

  handleWordHover(wordElement) {
    wordElement.classList.add('word-hovered');
    this.showQuickTooltip(wordElement);
  }

  handleWordLeave(wordElement) {
    wordElement.classList.remove('word-hovered');
    this.hideQuickTooltip();
  }

  async getWordData(wordKey) {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
    let wordData = this.dictionary.getWord(wordKey);

    if (!wordData && typeof this.dictionary?.loadAdditionalWordData === 'function') {
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      try {
        await this.dictionary.loadAdditionalWordData(wordKey);
        wordData = this.dictionary.getWord(wordKey);
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–æ–≤–∞:', wordKey);
      }
    }
    
    return wordData;
  }

  showBasicWordInfo(wordKey, wordElement) {
    const translation = wordElement.dataset.translation || '–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞';
    
    const content = `
      <div class="basic-word-info">
        <div class="word-header">
          <h3 class="word-title">${wordKey}</h3>
        </div>
        <div class="translation-section">
          <div class="translation-text">${translation}</div>
        </div>
        <div class="word-note">
          <p>üìù –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ–≤–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.</p>
        </div>
      </div>
    `;

    this.modal.open({
      title: wordKey,
      content,
      size: 'small'
    });
  }

  showErrorMessage(wordElement) {
    const content = `
      <div class="error-message">
        <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</p>
      </div>
    `;

    this.modal.open({
      title: '–û—à–∏–±–∫–∞',
      content,
      size: 'small'
    });
  }

  showQuickTooltip(wordElement) {
    const translation = wordElement.dataset.translation;
    if (!translation || translation === '–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞') {
      this.tooltip.classList.remove('quick-tooltip--visible');
      return;
    }

    this.tooltip.textContent = translation;
    const rect = wordElement.getBoundingClientRect();

    // Position tooltip above the word
    const top = rect.top - this.tooltip.offsetHeight - 8; // 8px gap
    const left = rect.left + (rect.width / 2) - (this.tooltip.offsetWidth / 2);

    this.tooltip.style.top = `${top}px`;
    this.tooltip.style.left = `${left}px`;
    this.tooltip.classList.add('quick-tooltip--visible');
  }

  hideQuickTooltip() {
    this.tooltip.classList.remove('quick-tooltip--visible');
  }

  highlightWord(wordElement) {
    wordElement.classList.add('word-highlight-animation');
    this.activeWord = wordElement;
  }

  removeWordHighlight(wordElement) {
    if (wordElement) {
      wordElement.classList.remove('word-highlight-animation');
    }
    this.activeWord = null;
  }

  trackWordClick(wordKey) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    if (window.PolishApp?.storage) {
      window.PolishApp.storage.trackEvent('word_clicked', {
        word: wordKey,
        timestamp: Date.now(),
        context: 'lesson_dialog'
      });
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É
   * @param {string} searchText - —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
   */
  highlightSearchResults(searchText) {
    if (!searchText.trim()) {
      this.clearHighlights();
      return;
    }

    const words = this.container.querySelectorAll('.clickable-word');
    const searchLower = searchText.toLowerCase();

    words.forEach(word => {
      const wordText = word.textContent.toLowerCase();
      const translation = (word.dataset.translation || '').toLowerCase();
      
      if (wordText.includes(searchLower) || translation.includes(searchLower)) {
        word.classList.add('search-highlight');
      } else {
        word.classList.remove('search-highlight');
      }
    });
  }

  clearHighlights() {
    const highlightedWords = this.container.querySelectorAll('.search-highlight');
    highlightedWords.forEach(word => {
      word.classList.remove('search-highlight');
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–ª–∏–∫–∞–º –Ω–∞ —Å–ª–æ–≤–∞
   * @returns {Object} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  getClickStats() {
    const events = this.getStoredEvents();
    const wordClicks = events.filter(event => event.type === 'word_clicked');
    
    const stats = {
      totalClicks: wordClicks.length,
      uniqueWords: new Set(wordClicks.map(click => click.data.word)).size,
      mostClickedWords: {}
    };

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ —Å–ª–æ–≤–∞–º
    wordClicks.forEach(click => {
      const word = click.data.word;
      stats.mostClickedWords[word] = (stats.mostClickedWords[word] || 0) + 1;
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    stats.mostClickedWords = Object.entries(stats.mostClickedWords)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 10)
      .reduce((obj, [word, count]) => {
        obj[word] = count;
        return obj;
      }, {});

    return stats;
  }

  /**
   * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–ª–æ–≤
   */
  async preloadPopularWords() {
    const stats = this.getClickStats();
    const popularWords = Object.keys(stats.mostClickedWords);
    
    for (const word of popularWords) {
      try {
        await this.getWordData(word);
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–æ:', word);
      }
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
   * @returns {Array} —Å–ø–∏—Å–æ–∫ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
   */
  getLearnedWords() {
    const events = this.getStoredEvents();
    const wordClicks = events.filter(event => event.type === 'word_clicked');
    
    return Array.from(new Set(wordClicks.map(click => click.data.word)));
  }

  destroy() {
    // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É–ª—Ç–∏–ø—ã
    const tooltips = document.querySelectorAll('.quick-tooltip');
    tooltips.forEach(tooltip => {
      if (tooltip.parentNode) {
        tooltip.parentNode.removeChild(tooltip);
      }
    });

    // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    if (this.activeWord) {
      this.removeWordHighlight(this.activeWord);
    }

    this.clearHighlights();
    
    // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏
    this.container = null;
    this.dictionary = null;
    this.modal = null;
    if (this.tooltip) {
        this.tooltip.remove();
    }
  }

  getStoredEvents() {
    const storage = window.PolishApp?.storage;

    if (storage) {
      return storage.get('user_events', []);
    }

    try {
      return JSON.parse(localStorage.getItem('userEvents') || '[]');
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage:', error);
      return [];
    }
  }
}
