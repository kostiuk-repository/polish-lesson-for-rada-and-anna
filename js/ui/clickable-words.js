export class ClickableWordsHandler {
  constructor({ container, dictionary, modal }) {
    this.container = container;
    this.dictionary = dictionary;
    this.modal = modal;
    this.activeWord = null;
    this.tooltip = null;
    this.isMobile = window.innerWidth <= 768;
    
    this.init();
  }

  init() {
    // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –Ω–µ —Å–æ–∑–¥–∞–µ–º tooltip
    if (!this.isMobile) {
      this.createTooltip();
    }
    this.setupEventListeners();
    this.detectDeviceType();
  }

  detectDeviceType() {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    this.isMobile = window.innerWidth <= 768 || 'ontouchstart' in window;
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', () => {
      const wasMobile = this.isMobile;
      this.isMobile = window.innerWidth <= 768;
      
      // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º tooltip
      if (wasMobile !== this.isMobile) {
        if (this.isMobile && this.tooltip) {
          this.destroyTooltip();
        } else if (!this.isMobile && !this.tooltip) {
          this.createTooltip();
        }
      }
    });
  }

  createTooltip() {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π tooltip, –µ—Å–ª–∏ –µ—Å—Ç—å
    this.destroyTooltip();
    
    this.tooltip = document.createElement('div');
    this.tooltip.className = 'quick-tooltip';
    document.body.appendChild(this.tooltip);
  }

  destroyTooltip() {
    if (this.tooltip && this.tooltip.parentNode) {
      this.tooltip.parentNode.removeChild(this.tooltip);
      this.tooltip = null;
    }
  }

  setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–∞–º
    this.container.addEventListener('click', (e) => {
      const clickableWord = e.target.closest('.clickable-word');
      if (clickableWord) {
        e.preventDefault();
        e.stopPropagation();
        this.handleWordClick(clickableWord);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    if (!this.isMobile) {
      this.container.addEventListener('mouseenter', (e) => {
        const clickableWord = e.target.closest('.clickable-word');
        if (clickableWord) {
          this.handleWordHover(clickableWord);
        }
      }, true);

      this.container.addEventListener('mouseleave', (e) => {
        const clickableWord = e.target.closest('.clickable-word');
        if (clickableWord) {
          this.handleWordLeave(clickableWord);
        }
      }, true);

      // –°–∫—Ä—ã–≤–∞–µ–º tooltip –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏
      this.container.addEventListener('mousemove', (e) => {
        const clickableWord = e.target.closest('.clickable-word');
        if (!clickableWord) {
          this.hideQuickTooltip();
        }
      });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    this.container.addEventListener('keydown', (e) => {
      const clickableWord = e.target.closest('.clickable-word');
      if (clickableWord && (e.key === 'Enter' || e.key === ' ')) {
        e.preventDefault();
        this.handleWordClick(clickableWord);
      }
    });
  }

  async handleWordClick(wordElement) {
    const wordKey = wordElement.dataset.wordKey;
    if (!wordKey) {
      console.warn('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç wordKey –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞:', wordElement);
      return;
    }

    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      this.highlightWord(wordElement);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      this.showLoadingFeedback(wordElement);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
      const wordData = await this.getWordData(wordKey);
      
      if (wordData) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ
        if (!wordElement.dataset.translation || wordElement.dataset.translation === '–ó–∞–≥—Ä—É–∑–∫–∞...') {
          const translation = wordData.translations?.ru || '–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞';
          wordElement.dataset.translation = translation;
          wordElement.setAttribute('title', translation);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å–ª–æ–≤–∞
        this.modal.showWord(wordData, {
          onClose: () => this.removeWordHighlight(wordElement)
        });
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        this.trackWordClick(wordKey);
      } else {
        // –ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        this.showBasicWordInfo(wordKey, wordElement);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞:', error);
      this.showErrorMessage(wordElement, error);
    } finally {
      this.hideLoadingFeedback(wordElement);
    }
  }

  showLoadingFeedback(wordElement) {
    wordElement.classList.add('word-loading');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—É–ª—å—Å–∞—Ü–∏–∏
    const style = document.createElement('style');
    style.textContent = `
      .word-loading {
        opacity: 0.7;
        animation: pulse 1s infinite;
      }
      @keyframes pulse {
        0% { opacity: 0.7; }
        50% { opacity: 1; }
        100% { opacity: 0.7; }
      }
    `;
    document.head.appendChild(style);
  }

  hideLoadingFeedback(wordElement) {
    wordElement.classList.remove('word-loading');
  }

  handleWordHover(wordElement) {
    if (this.isMobile) return;
    
    wordElement.classList.add('word-hovered');
    
    // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º tooltip
    clearTimeout(this.hoverTimeout);
    this.hoverTimeout = setTimeout(() => {
      this.showQuickTooltip(wordElement);
    }, 500); // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
  }

  handleWordLeave(wordElement) {
    if (this.isMobile) return;
    
    wordElement.classList.remove('word-hovered');
    clearTimeout(this.hoverTimeout);
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–∫—Ä—ã—Ç–∏–µ–º tooltip
    clearTimeout(this.hideTimeout);
    this.hideTimeout = setTimeout(() => {
      this.hideQuickTooltip();
    }, 200);
  }

  async getWordData(wordKey) {
    if (!this.dictionary) {
      throw new Error('–°–ª–æ–≤–∞—Ä—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–ª–æ–≤–∞—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
      if (!this.dictionary.isInitialized) {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å...');
        await this.dictionary.init();
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
      const normalizedKey = this.dictionary.normalizeWord(wordKey);
      console.log(`–ò—â–µ–º —Å–ª–æ–≤–æ: ${wordKey} (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: ${normalizedKey})`);
      
      const wordData = await this.dictionary.getWord(normalizedKey);
      
      if (!wordData) {
        console.warn(`–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ: ${wordKey}`);
        // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –¥—Ä—É–≥–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
        return await this.tryAlternativeSearch(wordKey);
      }
      
      return wordData;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞:', error);
      throw error;
    }
  }

  async tryAlternativeSearch(wordKey) {
    console.log('–ü—ã—Ç–∞–µ–º—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è:', wordKey);
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞
    const exactMatch = await this.dictionary.getWord(wordKey.toLowerCase());
    if (exactMatch) return exactMatch;
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –ø–µ—Ä–≤—ã–º –±—É–∫–≤–∞–º (–¥–ª—è —Å–ª–æ–≤–æ—Ñ–æ—Ä–º)
    const searchResults = this.dictionary.searchWords(wordKey, 1);
    if (searchResults.length > 0) {
      return searchResults[0].word;
    }
    
    return null;
  }

  showBasicWordInfo(wordKey, wordElement) {
    const translation = wordElement.dataset.translation && 
                        wordElement.dataset.translation !== '–ó–∞–≥—Ä—É–∑–∫–∞...' 
                        ? wordElement.dataset.translation 
                        : '–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω';
    
    const content = `
      <div class="basic-word-info">
        <div class="word-header">
          <h3 class="word-title">${wordKey}</h3>
          <span class="word-type-badge">–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</span>
        </div>
        <div class="translation-section">
          <div class="translation-text">${translation}</div>
        </div>
        <div class="word-note">
          <h4>üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
          <p>–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ–≤–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ.</p>
          <p>–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å–ª–æ–≤–æ—Ñ–æ—Ä–º–∞ –∏–ª–∏ —Å–ª–æ–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</p>
        </div>
        <div class="word-suggestions">
          <h4>üí° –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</h4>
          <ul>
            <li>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –±–∞–∑–æ–≤—É—é —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞</li>
            <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è</li>
            <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π —Å–ª–æ–≤–∞—Ä—å</li>
          </ul>
        </div>
      </div>
    `;

    this.modal.open({
      title: `–°–ª–æ–≤–æ: ${wordKey}`,
      content,
      size: 'default',
      footer: `
        <button class="btn btn--primary" onclick="this.closest('.modal').querySelector('.modal__close').click()">
          –ü–æ–Ω—è—Ç–Ω–æ
        </button>
      `
    });
  }

  showErrorMessage(wordElement, error) {
    const content = `
      <div class="error-message">
        <h3>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ.</p>
        <details>
          <summary>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏</summary>
          <pre>${error.message}</pre>
        </details>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</p>
        <ul>
          <li>–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</li>
          <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</li>
          <li>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</li>
        </ul>
      </div>
    `;

    this.modal.open({
      title: '–û—à–∏–±–∫–∞',
      content,
      size: 'small',
      footer: `
        <button class="btn btn--primary" onclick="window.location.reload()">
          –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
        </button>
        <button class="btn btn--outline" onclick="this.closest('.modal').querySelector('.modal__close').click()">
          –ó–∞–∫—Ä—ã—Ç—å
        </button>
      `
    });
  }

  showQuickTooltip(wordElement) {
    if (!this.tooltip || this.isMobile) return;

    let translation = wordElement.dataset.translation;
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –∞—Ç—Ä–∏–±—É—Ç–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ title
    if (!translation || translation === '–ó–∞–≥—Ä—É–∑–∫–∞...' || translation === '–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞') {
      translation = wordElement.getAttribute('title');
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º tooltip
    if (!translation || translation === '–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞' || translation === '–ó–∞–≥—Ä—É–∑–∫–∞...' || translation === '–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω') {
      this.hideQuickTooltip();
      return;
    }

    this.tooltip.innerHTML = `
      <div class="tooltip-content">
        <div class="tooltip-word">${wordElement.textContent}</div>
        <div class="tooltip-translation">${translation}</div>
        <div class="tooltip-hint">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π</div>
      </div>
    `;
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º tooltip
    this.positionTooltip(wordElement);
    this.tooltip.classList.add('quick-tooltip--visible');
  }

  positionTooltip(wordElement) {
    if (!this.tooltip) return;

    const rect = wordElement.getBoundingClientRect();
    const tooltipRect = this.tooltip.getBoundingClientRect();
    
    let top = rect.top - tooltipRect.height - 10;
    let left = rect.left + (rect.width / 2) - (tooltipRect.width / 2);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ tooltip –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
    const margin = 10;
    if (left < margin) {
      left = margin;
    } else if (left + tooltipRect.width > window.innerWidth - margin) {
      left = window.innerWidth - tooltipRect.width - margin;
    }
    
    if (top < margin) {
      top = rect.bottom + 10; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–∏–∑—É, –µ—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è —Å–≤–µ—Ä—Ö—É
    }

    this.tooltip.style.top = `${top + window.scrollY}px`;
    this.tooltip.style.left = `${left + window.scrollX}px`;
  }

  hideQuickTooltip() {
    if (this.tooltip) {
      this.tooltip.classList.remove('quick-tooltip--visible');
    }
  }

  highlightWord(wordElement) {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    if (this.activeWord && this.activeWord !== wordElement) {
      this.removeWordHighlight(this.activeWord);
    }
    
    wordElement.classList.add('word-highlight-animation');
    this.activeWord = wordElement;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      this.removeWordHighlight(wordElement);
    }, 3000);
  }

  removeWordHighlight(wordElement) {
    if (wordElement) {
      wordElement.classList.remove('word-highlight-animation');
    }
    if (this.activeWord === wordElement) {
      this.activeWord = null;
    }
  }

  trackWordClick(wordKey) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    if (window.PolishApp?.storage) {
      window.PolishApp.storage.trackEvent('word_clicked', {
        word: wordKey,
        timestamp: Date.now(),
        context: 'lesson_dialog',
        deviceType: this.isMobile ? 'mobile' : 'desktop'
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–ª–æ–≤–∞
      window.PolishApp.storage.updateWordProgress(wordKey, {
        viewCount: (window.PolishApp.storage.getWordProgress(wordKey).viewCount || 0) + 1
      });
    }
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É
   * @param {string} searchText - —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
   */
  highlightSearchResults(searchText) {
    if (!searchText.trim()) {
      this.clearHighlights();
      return;
    }

    const words = this.container.querySelectorAll('.clickable-word');
    const searchLower = searchText.toLowerCase();

    words.forEach(word => {
      const wordText = word.textContent.toLowerCase();
      const translation = (word.dataset.translation || '').toLowerCase();
      
      if (wordText.includes(searchLower) || translation.includes(searchLower)) {
        word.classList.add('search-highlight');
      } else {
        word.classList.remove('search-highlight');
      }
    });
  }

  clearHighlights() {
    const highlightedWords = this.container.querySelectorAll('.search-highlight');
    highlightedWords.forEach(word => {
      word.classList.remove('search-highlight');
    });
  }

  destroy() {
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
    clearTimeout(this.hoverTimeout);
    clearTimeout(this.hideTimeout);
    
    // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É–ª—Ç–∏–ø—ã
    this.destroyTooltip();

    // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    if (this.activeWord) {
      this.removeWordHighlight(this.activeWord);
    }

    this.clearHighlights();
    
    // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏
    this.container = null;
    this.dictionary = null;
    this.modal = null;
  }
}